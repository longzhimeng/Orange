基于bochs + bochs GUI debugger install:
1.ubuntu14.04安装bochs:
第一步：
sudo apt-get install build-essential 
sudo apt-get install xorg-dev 
sudo apt-get install bison 
sudo apt-get install g++ 

第二步：
1.下载安装包https://sourceforge.net/projects/bochs/files/ 
2.解压下载的源代码：
tar zxvf bochs-2.6.9.tar.gz
3.进入bochs-2.6.9目录，运行configure脚本，它会测试你的机器，C/C++编译器以及一些库，用来判断何种配置适合于你的机器。运行：
zhaoxiao@zhaoxiao:~/Documents/work/tools/bochs-2.6.9$ 
./configure --enable-debugger --with-x11 --with-wx --enable-disasm --enable-all-optimizations --enable-readline  --enable-debugger-gui

Note：
To use the debugger, you must configure Bochs with the --enable-debugger and --enable-disasm flags. 
For example: ./configure --enable-debugger --enable-disasm

To use the gui debugger, you must configure Bochs with the default debugger switches and the --enable-debugger-gui flag. 
For example: ./configure --enable-debugger --enable-disasm --enable-debugger-gui

Don't compile the debugger and gdb simultaneously,otherwise it will report the 
"error: --enable-debugger and --enable-gdb-stub are mutually exclusive"
./configure --enable-debugger --enable-disasm --enable-debugger-gui --enable-gdb-stub

4.make
5.make install

第三步：
配置文件bochsrc.bxrc如下所示：
# 关键字为：megs
megs:32

# 第二步，设置对应真实机器的BIOS和VGA BIOS。
# 对应两个关键字为：romimage 和 vgaromimage
romimage:file=/usr/local/share/bochs/BIOS-bochs-latest
vgaromimage:file=/usr/local/share/bochs/VGABIOS-lgpl-latest

# 第三步，设置Bochs所使用的磁盘，软盘的关键字为floppy。
# 若只有一个软盘，则使用floppya即可，若有多个，则为floppya，floppyb…
#floppya: 1_44=a.img, status=inserted

# 第四步，选择启动盘符。
#boot: floppy　　#默认从软盘启动，将其注释
boot:disk
# 第五步，设置日志文件的输出。
log:bochs.out

# 第六步，开启或关闭某些功能。
# 下面是关闭鼠标，并打开键盘。
mouse:enabled=0
keyboard:keymap=/usr/local/share/bochs/keymaps/x11-pc-us.map

# 硬盘设置
ata0: enabled=1,ioaddr1=0x1f0,ioaddr2=0x3f0,irq=14
ata0-master: type=disk,path="hd60M.img",mode=flat
# 下面的是增加的bochs对gdb的支持，这样gdb便可以远程连接到此机器的1234端口调试了
gdbstub:enabled=1,port=1234,text_base=0,data_base=0,bss_base=0

.bashrc
#bochs
Bochs_Path=/home/zhaoxiao/Documents/work/tools/bochs-2.6.9
alias bochs='$Bochs_Path/bochs -f $Bochs_Path/bochsrc.bxrc' 

2.学习手册
http://bochs.sourceforge.net/doc/docbook/user/index.html
bochs配置项：
1).megs
Examples:
  megs: 32
  megs: 128
This option sets the 'guest' and 'host' memory parameters to the same value. In all other cases the 'memory' option should be used instead.

2).romimage
Examples:
  romimage: file=bios/BIOS-bochs-latest, options=fastboot
  romimage: file=$BXSHARE/BIOS-bochs-legacy
  romimage: file=mybios.bin, address=0xfff80000
The ROM BIOS controls what the PC does when it first powers on. Normally, you can use a precompiled BIOS in the source or binary distribution called BIOS-bochs-latest. The default ROM BIOS is usually loaded starting at address 0xfffe0000, and it is exactly 128k long. The legacy version of the Bochs BIOS is usually loaded starting at address 0xffff0000, and it is exactly 64k long. You can use the environment variable $BXSHARE to specify the location of the BIOS. The usage of external large BIOS images (up to 512k) at memory top is now supported, but we still recommend to use the BIOS distributed with Bochs. The start address is optional, since it can be calculated from image size. The Bochs BIOS currently supports only the option "fastboot" to skip the boot menu delay.

3).vgaromimage
Examples:
  vgaromimage: file=bios/VGABIOS-elpin-2.40
  vgaromimage: file=$BXSHARE/VGABIOS-lgpl-latest
  vgaromimage: file=$BXSHARE/VGABIOS-lgpl-latest-cirrus
This tells Bochs what VGA ROM BIOS to load (at 0xC0000).
A VGA BIOS from Elpin Systems, Inc. as well as a free LGPL'd VGA BIOS are provided in the source and binary distributions.
Note: Please check with the vga option to decide what VGA BIOS to use.

4).The Bochs debugger gui
The graphical front-end for the Bochs command line debugger is available for Windows and GTK2 hosts.
To use the gui debugger, you must configure Bochs with the default debugger switches and the --enable-debugger-gui flag. For example:
./configure --enable-debugger --enable-disasm --enable-debugger-gui
At runtime you need to add the value gui_debug to the display_library options parameter in order to use the gui instead of the command line debugger. This example shows how to use it with the 'x' gui:
display_library: x, options="gui_debug"
The gui debugger consists of a gui window with a menu bar, a button bar and some child windows that show the cpu registers, disassembler output, memory dump and the internal debugger output. A command prompt for entering debugger commands is also available.
